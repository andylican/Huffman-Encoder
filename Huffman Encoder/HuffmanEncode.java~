import java.io.File;
import java.util.Scanner;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
class HuffmanEncode {
    public static void main (String[] args) throws IOException{
        //System.out.println((char)());
        //File original = new File();
        System.out.println((byte)'‰');
         FileInputStream in = null;
          in = new FileInputStream("ORIGINAL.TXT");
          int c;
        //Scanner input = new Scanner(original);
        SimpleMap<Byte,Integer>freq = new SimpleMap<Byte,Integer>();
        String msg = "";
        while ((c = in.read()) != -1) {
            msg += ((char)c + "");
           
        }
        in.close();
        System.out.println(msg);
      
        for(int i=0; i<msg.length(); i++) {
            byte b = (byte)(msg.charAt(i));
            if(!freq.containsKey(b)) {
                freq.put(b,1);
            } else {
                int curFreq = freq.get(b);
                freq.put(b,curFreq+1);
            }
       }
        SimplePriorityQueue<HuffmanPair> pq = new SimplePriorityQueue<HuffmanPair>();
        SimpleMap<Byte,String>code = new SimpleMap<Byte,String>();
       System.out.println(freq);
        for(int i=0; i<freq.size(); i++) {
            byte key = freq.getKey(i);
            int value = freq.get(key);
            pq.add(new HuffmanPair(key+"",value));
        }
        //System.out.println(pq);
        
        
        while(pq.size() > 1) {
            HuffmanPair left = pq.dequeue();
            HuffmanPair right = pq.dequeue();
            //System.out.println(left.getElement()+" "+left.getFreq());
            //System.out.println(right.getElement()+" "+right.getFreq());
            String punct = ")(";
            String newStr = "";
            if(punct.contains(left.getElement().charAt(left.getElement().length()-1)+"") && punct.contains(right.getElement().charAt(0)+"")) {
                newStr = "("+left.getElement()+right.getElement()+")";
            } else newStr = "("+left.getElement()+" "+right.getElement()+")";
            //System.out.println(newStr);
            encode(left.getElement(),code,true);
            encode(right.getElement(),code,false);
            int newFreq= left.getFreq()+right.getFreq();
            pq.add(new HuffmanPair(newStr,newFreq));
        }
        FileOutputStream out = null;
        out = new FileOutputStream("COMPRESSED.MZIP");
       // File compressed = new File("COMPRESSED.MZIP");
       // PrintWriter p = new PrintWriter(compressed);
       // p.println("ORIGINAL.TXT");
        //p.println(pq.dequeue().getElement());
        String name = "ORIGINAL.TXT";
        out.write(name.getBytes());
        out.write(13);
        String tree = pq.dequeue().getElement();
        out.write(tree.getBytes());
        out.write(13);
        //System.out.println(pq.dequeue().getElement());
        DoublyLinkedList<Byte>bits = new DoublyLinkedList<Byte>();
        int bitIndex = 0;
        System.out.println(code);
         File f = new File ("bits.txt");
       PrintWriter p = new PrintWriter(f);
        for(int i=0; i<msg.length(); i++) {
            String encoded = code.get((byte)(msg.charAt(i)));
            p.print(encoded);
            for(int j=0; j<encoded.length(); j++) {
                char ch = encoded.charAt(j);
                byte curBit = Byte.parseByte(ch+"");
                int mod = bitIndex % 8;
                int pos = bitIndex/8;
                byte curElement = 0;
                if(pos < bits.size()) {
                    curElement = bits.remove(pos);
                }
                
                curElement += (curBit << (7-mod));
                bits.add(pos,curElement);
                bitIndex++;
            }
            
        }
        p.close();
        int leftOver = 7 - ((bitIndex-1) % 8);
        
        //p.println(leftOver);
       out.write((byte)(leftOver+48));
       out.write(13);
      
        while(bits.size() > 0) {
            byte element = bits.remove(0);
            //System.out.print(element+" ");
           // int element2 = (((int)element) & ((1 << 8)-1));
           // while(element2 != 0) {
             //   System.out.print(element2 & 1);
             //   element2 = (element2 >>> 1);
            //}
            /*
            String binary = "";
            int temp = element;
            for(int i=0; i<8; i++) {
                temp = (temp & (1));
                binary = temp + binary;
                temp = temp >> 1;
                
                
            }
            System.out.print(binary);
        */
            
           out.write((element));
           //System.out.println();
         //  System.out.println(element2);
            
            
        }
        //p.close();
       out.close();
        
    }
    public static void encode(String str,  SimpleMap<Byte,String>code,boolean onLeft) {
        String punct = "() ";
        int index = 0;
        System.out.println(str);
        while(index < str.length()) {
            char c = str.charAt(index);
            int curIndex = index;
            if(!punct.contains(c+"")) {
                index++;
                while(index < str.length() && !punct.contains(str.charAt(index)+"")) {
                    index++;
                }
                byte b = Byte.parseByte(str.substring(curIndex,index));
                String digit = ""+0;
                if(!onLeft) digit = ""+1;
                if(!code.containsKey(b)) {
                    code.put(b,digit);
                } else {
                    String value = code.get(b);
                    code.put(b,digit+value);
                }
            }
            index++;
        }
    }
}
//-101 -87 -69 -101 -50 -2 111 82 -113 -62 -51 -55 -86 83 38 -52 -62 7 -62 -77 71 -103 -24 19 112 -40 86 37 77 -89 -31 2 -121 120 -60 -74 -71 -82 74 -75 120 2 -87 -17 -47 -102 -109 -25 -7 -84 124 -26 -45 110 1 -34 80 -21 -66 86 -82 21 16 33 -116 55 -32 29 -27 45 -101 -25 0 74 50 -35 63 -70 27 -10 108 94 -53 115 33 -62 108 35 -9 -6 121 -86 83 48 -109 108 -62 108 50 83 -4 33 -5 52 100 124 -12 -9 70 -31 -47 59 -110 -14 -75 121 -84 124 -26 -45 110 48 -27 106 -9 20 -25 112 44 85 120 31 -122 99 -64 -81 -3 -47 -72 114 95 105 38 118 -71 -82 102 -116 -113 -98 -102 -8 97 -55 58 -43 -7 -8 12 95 21 69 -4 45 41 -36 -4 -4 -19 115 92 -107 106 -57 -46 120 46 38 81 -38 -26 -72 51 30 5 127 -81 -49 -74 -81 102 -59 -20 -74 16 -41 53 -52 -47 -111 -13 -45 95 -52 -90 67 -120 1 -17 35 108 90 -65 21 68 -53 -41 -128 -58 -81 -75 -120 -3 37 -124 -72 -34 -66 42 -113 -110 -53 102 -11 65 123 85 -21 14 -41 53 -63 -104 -16 43 -3 127 63 16 -61 -63 124 75 123 -54 -78 -29 -127 80 95 21 65 -4 -4 18 14 -112 119 -55 65 -105 78 -71 85 -17 44 0 -82 86 -106 -51 -127 -38 -26 -71 -102 50 62 122 107 -23 44 37 -54 -46 -39 -80 -61 -75 -51 112 102 60 10 -1 95 -61 87 -128 -53 47 -118 -93 -40 95 87 36 95 117 -105 37 -27 106 -7 13 -34 -8 75 42 -25 -25 -25 -27 97 47 -118 -93 -67 -112 1 89 124 85 27 52 18 -39 -80 59 92 -41 51 70 71 -49 77 126 126 9 7 72 59 -14 -121 43 -29 45 -101 -55 121 34 -5 -8 -86 56 -102 50 -36 11 -89 71 107 -102 -32 -52 120 21 -2 -65 -122 -82 96 -34 -95 -57 2 -96 -70 32 118 -71 -82 102 -116 -113 -98 -102 -4 -36 -122 31 14 16 -41 53 -63 -104 -16 43 -3 127 13 93 -18 -42 40 115 -13 -13 -4 53 120 -121 101 14 75 -19 64 -99 -15 84 29 -82 107 -103 -93 35 -25 -90 -65 -100 60 -4 18 14 -112 119 -51 89 108 -34 75 -25 93 74 -116 47 -118 -93 15 -16 -43 -52 29 -52 46 115 -97 -38 -71 -125 -71 -123 -19 64 -99 -15 84 31 -31 -86 100 62 -44 -68 10 -21 -77 125 109 80 109 -114 -41 53 -63 -104 -16 43 -3 125 -101 23 -78 -34 -81 16 3 -25 -30 29 -105 -108 62 42 -117 -16 43 -22 59 92 -41 51 70 71 -49 77 127 10 -81 -85 -60 -69 -104 94 2 -6 -66 42 -115 94 24 114 78 -113 -25 -20 24 -12 -15 -5 -88 -68 -27 -118 -81 14 96 -17 -28 -68 -84 36 118 -71 -82 12 -57 -127 95 -21 -20 47 21 -124 -71 -117 2 -61 -12 -75 71 27 -41 30 106 -82 94 117 94 11 -77 -9 -117 -71 -123 -14 94 86 -108 14 -41 53 -52 -47 -111 -13 -45 95 -49 -60 -69 -104 92 11 10 -8 -86 57 90 -68 67 -113 -49 -127 96 93 60 122 106 86 -85 -124 124 -26 62 -81 -126 -116 84 -21 -90 -73 -81 57 98 -85 -58 64 57 88 119 -57 120 -16 -98 -78 -105 -80 -61 -45 -22 -65 -54 -12 41 -42 93 99 113 -34 95 57 -113 -85 -28 -69 -81 34 -15 -106 -1 21 65 -6 82 -7 -41 82 -93 11 -30 -88 59 92 -41 6 99 -64 -81 -11 -16 -110 -89 92 98 28 124 82 43 116 -24 -1 13 64 -99 -45 -81 113 -108 43 -86 47 -52 -76 -127 -111 -2 22 -123 -11 122 125 87 -60 -83 45 -101 -24 16 -81 -126 -83 45 -27 -30 -76 -127 94 42 -16 41 0 28 -63 -39 -38 -26 -71 -102 50 62 122 107 -17 23 115 11 -30 -88 -16 -86 -43 -15 87 -55 119 48 -67 -123 -11 114 95 116 111 -116 67 -113 29 -30 -102 -34 -113 -13 -10 23 -43 -16 93 80 109 -117 -50 -95 50 -71 47 43 87 -62 84 -28 96 4 -116 63 -49 -118 125 53 -67 121 -53 21 94 50 1 -54 -61 -66 86 -82 18 -80 -20 -54 0 22 -25 -7 -13 7 125 95 85 -54 -41 88 -67 -92 -98 -81 29 -27 -55 77 -94 -75 95 -30 -88 -29 -68 -66 124 -63 -33 -70 1 92 -83 92 -47 0 -51 -10 39 -31 69 -19 114 -76 -74 108 57 90 -68 67 -113 -118 -68 67 -78 -27 106 79 -110 -4 20 118 -71 -82 12 -57 -127 95 -21 -7 -4 -105 115 11 -32 -96 74 -97 87 -118 -62 95 57 -119 -5 80 -34 91 55 -97 -97 -97 -49 -63 32 -23 7 126 33 -121 -68 -115 -79 31 -91 -86 38 62 -82 101 -121 102 -42 71 107 -102 -26 104 -56 -7 -23 -81 -25 -14 93 -52 47 16 -20 -71 47 -75 13 -8 -17 30 -102 -34 -72 -32 84 23 -97 -126 65 -46 14 -49 -46 -83 92 39 -84 -91 -55 23 -35 101 -60 -47 -106 -32 93 58 63 120 -69 -104 95 21 71 36 95 124 77 25 110 5 -45 -93 -75 -51 112 102 60 10 -1 95 -49 -28 -69 -104 93 -18 -42 47 -118 -93 -114 -15 77 111 71 -20 -40 -67 -106 -11 126 42 -119 -105 -81 -126 -12 47 101 -77 122 120 -5 80 -36 -113 -13 -104 0 125 -45 -22 -65 -127 44 -18 5 125 45 -101 -15 84 106 -4 8 47 -118 -93 -115 -21 -102 -78 -39 -65 37 -117 124 124 -31 43 124 -38 -29 7 115 11 -58 80 1 98 59 92 -41 51 70 71 -49 77 127 82 -116 20 66 -70 -58 -13 -16 72 58 65 -34 29 -82 107 -125 49 -32 87 -6 -2 -91 24 40 -123 117 -115 -30 -80 -105 -59 81 49 -11 124 -105 117 -49 -49 -49 -30 -80 -105 -59 81 -25 0 119 -55 126 74 127 53 37 -99 -85 -32 75 59 -19 98 63 9 42 117 -16 9 -113 66 62 124 10 -6 -66 42 -125 -75 -51 115 52 100 124 -12 -41 -26 -120 85 75 102 -7 -8 36 29 32 -18 105 -8 89 13 -62 26 -26 -72 51 30 5 127 -55 23 -36 56 -35 81 -68 -72 -17 35 -8 85 67 -49 -44 -52 58 70 105 -32 67 -68 -91 -77 124 -73 -54 -43 -14 85 -68 67 -113 88 -36 -83 95 65 -64 -85 -62 87 68 -95 87 59 92 -41 6 99 -64 -81 -11 -3 20 33 -82 107 -103 -93 35 -25 -90 -66 -106 -88 -103 122 -15 72 -83 -19 36 -49 -46 -43 19 31 87 -63 69 113 -58 -78 -23 -48 71 75 84 124 23 84 27 98 -10 -110 126 -43 122 -28 -67 -20 -128 14 -99 4 53 -51 112 102 60 10 -1 95 -46 120 71 102 -59 -20 -74 127 -97 -124 84 55 -25 57 -2 124 -25 59 92 -41 51 70 71 -49 79 122 19 45 80 -22 -126 -43 -29 -68 -72 102 60 10 -1 -101 113 -63 15 106 -65 43 93 68 -72 -61 -62 -43 -32 67 114 -121 37 -26 89 94 -47 -38 -26 -70 126 -90 97 -46 51 77 127 11 69 -19 87 -26 -82 -81 102 -59 -20 -74 118 -71 -82 102 -116 -113 -98 -102 -6 75 9 123 11 -22 -8 -86 56 -17 47 11 87 -63 85 -66 -119 -36 -105 14 -41 53 -45 -11 51 14 -111 -102 107 -8 90 47 106 -65 53 66 26 -26 -71 -102 50 62 122 123 -48 40 97 80 -10 -108 57 -73 -108 -18 -69 -27 106 -24 -39 -117 -72 25 37 68 56 102 60 10 -1 -114 -14 -16 -75 115 46 -124 -25 2 -95 -55 121 90 -71 -73 84 111 35 -75 -51 115 52 100 124 -12 -41 -46 -43 28 -111 125 -42 94 -43 126 38 -116 -73 2 -23 -47 -38 -26 -70 126 -90 97 -46 51 77 125 45 81 -20 47 -85 -28 -69 -82 86 18 -8 -86 47 10 4 99 -75 -51 115 52 100 124 -12 -41 -46 -43 30 41 0 31 106 92 -123 -19 123 85 -4 107 -86 125 58 59 92 -41 51 70 71 -49 78 86 -70 -59 14 -79 -93 123 74 28 -64 40 -67 59 92 -41 79 -44 -52 58 70 105 -81 -91 -86 47 -57 102 -43 -8 -17 47 -118 -94 -4 8 -127 120 -53 127 57 98 -85 -5 11 -22 -30 11 -48 -27 -113 -55 119 92 -84 36 118 -71 -82 -97 -87 -104 116 -116 -45 -58 4 -74 108 58 -58 -115 -19 40 115 0 -94 -12 -19 115 93 63 83 48 -23 25 -90 -65 52 24 -69 41 109 18 -39 -77 79 75 84 123 11 -22 -30 0 44 85 -105 43 74 29 -32 -35 -17 -62 -83 -14 -28 -68 -94 -108 11 -30 -88 -65 78 91 -53 -93 101 32 125 -84 92 -4 -4 -3 27 41 3 -19 98 -8 -86 61 -123 -11 124 20 98 -89 92 -83 93 -11 95 30 86 -106 -51 -8 -86 60 34 91 -41 37 -7 84 10 -21 -119 -38 -26 -71 42 -43 -113 50 87 48 21 -24 76 -73 82 -75 95 -93 101 32 121 -6 -103 -121 72 -51 60 -95 -9 67 126 25 -113 2 -65 63 -61 87 -100 1 50 -95 -19 40 123 14 -14 -21 -65 106 -71 -38 -26 -71 -102 50 62 122 107 -17 23 115 11 -126 -116 36 94 -70 117 -85 -25 -32 -112 116 -125 -77 -4 -4 42 -71 90 -22 -125 109 -54 -43 -63 42 -121 88 -36 -83 92 39 -84 -92 127 -97 -55 126 -44 -68 106 27 -14 -75 124 -122 -17 124 37 -107 113 -121 -59 81 -14 83 -4 -3 -123 -11 124 23 84 27 98 -13 -88 76 -83 95 55 -24 -127 72 -54 -43 -15 -81 85 -110 -89 -85 -57 121 120 81 -120 -68 -117 30 75 -45 -57 -18 -94 -17 -45 -99 43 -47 -38 -26 -70 126 -90 97 -46 51 77 125 45 81 127 -70 -117 -65 78 116 -81 88 118 -71 -82 102 -116 -113 -98 -102 -5 -59 -36 -62 -23 -117 -38 -23 -41 123 32 3 -30 -88 59 92 -41 79 -44 -52 58 70 105 -81 -77 98 -10 91 -43 -23 -29 -60 0 -93 100 59 50 -68 -95 -55 121 90 -66 18 -89 35 0 36 103 57 -49 -55 126 84 -102 -103 113 51 19 -75 -51 115 52 100 124 -12 -41 -13 -115 -15 84 76 -67 125 -87 120 -92 86 -23 -42 -81 -59 81 50 -11 -45 -57 -42 -23 60 78 -41 53 -45 -11 51 14 -111 -102 107 -13 -10 12 120 -7 -84 -118 -33 10 -73 -53 -27 66 8 121 111 -114 8 40 16 85 3 -4 -4 82 0 62 75 -30 -80 -105 -49 -90 -120 17 -38 -26 -70 104 -111 -69 -111 84 61 -91 14 9 27 98 -128 -32 -85 -51 45 115 92 -51 25 31 61 53 -12 -75 71 -118 64 7 43 -30 118 -71 -82 102 -116 -113 -98 -98 70 -18 69 80 -10 -108 56 36 109 -118 3 -126 -82 118 -71 -82 102 -116 -113 -98 -100 3 11 84 58 -96 -72 -105 -97 -87 -104 116 -116 -45 87 -114 -14 -27 106 -57 -32 -93 101 -66 62 53 93 76 -110 -94 30 17 45 -14 -15 -92 109 -120 -3 -102 50 62 122 114 -75 -42 40 112 -108 -3 18 -103 -98 -113 -16 -109 94 37 -25 -22 102 29 35 52 -24 -124 -74 111 43 87 -101 45 -52 -93 -75 -55 86 -84 124 75 119 -68 -83 82 -65 -120 113 -21 26 55 43 87 0 -17 41 108 -33 56 2 81 -106 -23 -15 -34 94 91 37 -27 106 -23 -116 -73 -21 101 124 125 -124 0 -120 113 63 102 -116 -113 -98 -99 -20 -116 123 15 63 83 48 -23 25 -90 -81 29 -27 -25 -22 102 29 35 52 -7 93 103 67 -110 -15 -32 88 -86 -4 20 -6 -128 118 -71 -104 68 -87 -13 -2 -93 -9 -31 -90 -66 -46 -121 49 118 101 95 124 119 -105 -70 33 106 -121 37 -27 106 -24 -39 -117 -72 25 37 68 56 102 60 10 -2 100 56 -53 35 -128
//[49 100110111010, 57 100110111011, 53 100110111100, 88 100110111101, 120 100110111110, 106 100110111111, 85 10011011100, 71 0000100110, 74 0000100111, 40 1001101000, 41 1001101001, 67 000010010, 83 100110101, 70 100110110, 82 110000100, 76 110000101, 72 110000110, 63 110000111, 33 00001000, 84 01001010, 89 01001011, 66 11010100, 44 11010101, 77 0000101, 80 0000110, 45 0000111, 87 0100100, 68 0111100, 107 0111101, 118 0111110, 69 0111111, 102 1000110, 75 1000111, 39 1001100, 112 1001110, 79 1001111, 98 1100000, 58 1101011, 99 001100, 103 001101, 109 010011, 119 100010, 121 110001, 100 110010, 73 110011, 78 110100, 108 00000, 46 00111, 117 01000, 65 01100, 13 01101, 10 01110, 115 10000, 105 10010, 104 10110, 114 10111, 110 11011, 97 0001, 116 0010, 111 0101, 101 1010, 32 111] 